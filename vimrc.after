" global variable
let g:snips_author='Keith Yao'
let g:snips_email ='i@yaofur.com'
let g:snips_url ='http://kebot.me/'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VIM WIKI Configuration
let g:vimwiki_use_mouse = 1
let g:vimwiki_list = [{'path': '~/Google Drive/vimwiki',
\ 'index': 'Home',
\ 'ext': '.md',
\ 'syntax': 'markdown',
\ 'path_html': '~/Google Drive/vimwiki/html/',
\ 'html_header': '~/Google Drive/vimwiki/template/header.tpl',}]

" {{{ Python
"
" Configure for Python
" !source ~/.zshrc

" au FileType python map <D-r> :!/usr/bin/env python % <Enter>
au FileType python map <D-r> :!/usr/local/bin/python % <Enter>

" Function to ativate a virtualenv in the embedded interpreter for
" omnicomplete and other things like that.
function LoadVirtualEnv(path)
    let activate_this = a:path . '/bin/activate_this.py'
    if getftype(a:path) == "dir" && filereadable(activate_this)
        python << EOF
import vim
activate_this = vim.eval('l:activate_this')
execfile(activate_this, dict(__file__=activate_this))
EOF
    endif
endfunction
" Load up a 'stable' virtualenv if one exists in ~/.virtualenv
let defaultvirtualenv = $HOME . "/.virtualenvs/stable"
" Only attempt to load this virtualenv if the defaultvirtualenv
" actually exists, and we aren't running with a virtualenv active.
if has("python")
    if empty($VIRTUAL_ENV) && getftype(defaultvirtualenv) == "dir"
        call LoadVirtualEnv(defaultvirtualenv)
    endif
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" use Pysmell as Complete 
"autocmd FileType python setlocal omnifunc=pysmell#Complete
" python }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configure for Coffee Script
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"  Compiler when save
"  if you have no vim-coffee-script installed
"  au BufWritePost *.coffee silent :!coffee -c %
"  options CoffeeMake options watch at `coffee -h`

" @TODO uncomment below to auto-compiler the page.
"au BufWritePost *.coffee silent CoffeeMake! | cwindow | redraw!
au FileType coffee map <D-b> silent CoffeeMake! | cwindow | redraw!

"  fold by indentation in CoffeeScript files:
au BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable
"  two-space indentation
au BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab

" CoffeeTags + TagBar
" `coffeetags --vim-conf >> .vimrc.after`

"if executable('coffeetags')
  "let g:tagbar_type_coffee = {
        "\ 'ctagsbin' : 'coffeetags',
        "\ 'ctagsargs' : '',
        "\ 'kinds' : [
        "\ 'f:functions',
        "\ 'o:object',
        "\ ],
        "\ 'sro' : ".",
        "\ 'kind2scope' : {
        "\ 'f' : 'object',
        "\ 'o' : 'object',
        "\ }
        "\ }
"endif


" Configure for Web Files
au FileType html map <D-r> :!open % <Enter>
" Stop Auto Refresh Chrom
" autocmd BufWritePost *.coffee,*.css,*.html :call Refresh_Chrome()

function! Refresh_Chrome()
python << EOF
import sys
sys.path.append('/Users/Kebot/Python/Envs/dev/lib/python2.7/site-packages/')
try:
    import appscript
    appscript.app("Google Chrome").windows[0].active_tab.reload()
except:
    import sys
    print 'path is',sys.path
EOF
endfunction

" Py Dictionary
" let g:pydiction_location="~/.vim/bundle/pydiction/complete-dict"

" extend ctags
let Tlist_Ctags_Cmd = '/usr/local/bin/ctags'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic-Options
" see: `help syntastic`
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" If enabled, syntastic will do syntax checks when buffers are first loaded as
" well as on saving
let g:syntastic_check_on_open=0
" /// disable auto check, use keybinding.
map <Leader>s :SyntasticCheck <Enter>
map <Leader>ts :SyntasticToggleMode <Enter>

" Default gui color scheme
" color ir_black
let vimrplugin_screenplugin = 0

autocmd FileType python setlocal omnifunc=pysmell#Complete

" gUndo Document is here http://sjl.bitbucket.org/gundo.vim/
nnoremap <F5> :GundoToggle<CR>

" Markdown Preview
au FileType markdown map <D-r> :PreviewMarkdown <Enter>

" gvim
"
if has('gui_running')
    set guioptions=aAce
    colorscheme solarized
    syntax enable
    set transparency=5
    " set guifont=Monaco:h14
    set guifont=Meslo\ LG\ M\ DZ:h14
    set guioptions=aAce
    set background=dark
    " key mappings
    """"""""""""""""""""""""
    map <D-CR> :set invfu<CR>
    "toggle fullscreen mode
    "
    " Change Input Method Configing
    " set noimd
     "set imactivatekey=C-space
     "inoremap <ESC> <ESC>:set iminsert=2<CR>

endif

" set file encodings
let &termencoding=&encoding
set fileencodings=utf-8,gbk,ucs-bom,cp936
