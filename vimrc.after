" Current Operation System
let os = substitute(system('uname'), "\n", "", "")
" echo os

" imap ii (
" imap oo {

" Custom key-mapping
imap <c-h> <left>
imap <c-j> <down>
imap <c-k> <up>
imap <c-l> <right>

nmap <s-h> :wincmd h <CR>
nmap <s-j> :wincmd j <CR>
nmap <s-k> :wincmd k <CR>
nmap <s-l> :wincmd l <CR>

" powerline support
python << EOF
import sys
sys.path.insert(0, '/usr/local/lib/python2.7/site-packages/')
from powerline.bindings.vim import source_plugin
source_plugin()
EOF

" diable error sounds
set noerrorbells
set novisualbell

" snippets variables
let g:snips_author='Keith Yao'
let g:snips_email ='i@yaofur.com'
let g:snips_url ='http://kebot.me/'

"g:always_use_first_snippet

let g:UltiSnipsSnippetsDir = '~/.janus/home/UltiSnips'
let g:UltiSnipsSnippetDirectories = ["snippets"]
let g:UltiSnipsDontReverseSearchPath="1"


" ack.vim
let g:ackprg = 'ag --nogroup --nocolor --column'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VIM WIKI Configuration
let g:vimwiki_list = [{'index': 'Index',
\ 'ext': '.md',
\ 'syntax': 'markdown',
\ 'path': '~/vimwiki',
\ 'path_html': '~/vimwiki/html/',
\ 'html_header': '~/vimwiki/template/header.tpl',}]
let g:vimwiki_use_mouse = 1

"if os == 'Linux'
  "let g:vimwiki_list['path'] = '~/vimwiki'
"elseif os == 'Darwin'
  "let g:vimwiki_list['path'] = '~/Google Drive/vimwiki'
"endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configuration for Evervim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" get dev-token from [DeveloperToken](https://www.evernote.com/api/DeveloperToken.action)
let g:evervim_devtoken='S=s4:U=a6472:E=14221f94585:C=13aca481985:P=1cd:A=en-devtoken:H=d8de32623b47e4bae6941e2876a8eaff'

" {{{ Python
"
" Configure for Python
" !source ~/.zshrc

au FileType python map <D-r> :!/usr/local/bin/python % <Enter>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" use jedi as Complete
let g:jedi#related_names_command = "<leader>w"


" python }}}
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" highlight reStructuredText in python docstring.
let g:riv_python_rst_hl=1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configure for Coffee Script
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"  Compiler when save
"  if you have no vim-coffee-script installed
"  au BufWritePost *.coffee silent :!coffee -c %
"  options CoffeeMake options watch at `coffee -h`

" @TODO uncomment below to auto-compiler the page.
"au BufWritePost *.coffee silent CoffeeMake! | cwindow | redraw!
au FileType coffee map <D-b> silent CoffeeMake! | cwindow | redraw!

"  fold by indentation in CoffeeScript files:
au BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable
"  two-space indentation
au BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab

" CoffeeTags + TagBar
" `coffeetags --vim-conf >> .vimrc.after`
"if executable('coffeetags')
  "let g:tagbar_type_coffee = {
        "\ 'ctagsbin' : 'coffeetags',
        "\ 'ctagsargs' : '',
        "\ 'kinds' : [
        "\ 'f:functions',
        "\ 'o:object',
        "\ ],
        "\ 'sro' : ".",
        "\ 'kind2scope' : {
        "\ 'f' : 'object',
        "\ 'o' : 'object',
        "\ }
        "\ }
"endif


" Configure for Web Files
au FileType html map <D-r> :!open % <Enter>
" Stop Auto Refresh Chrom
" autocmd BufWritePost *.coffee,*.css,*.html :call Refresh_Chrome()

function! Refresh_Chrome()
python << EOF
import sys
sys.path.append('/Users/Kebot/Python/Envs/dev/lib/python2.7/site-packages/')
try:
    import appscript
    appscript.app("Google Chrome").windows[0].active_tab.reload()
except:
    import sys
    print 'path is',sys.path
EOF
endfunction

" Py Dictionary
" let g:pydiction_location="~/.vim/bundle/pydiction/complete-dict"

" extend ctags
let Tlist_Ctags_Cmd = '/usr/local/bin/ctags'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic-Options
" see: `help syntastic`
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" If enabled, syntastic will do syntax checks when buffers are first loaded as
" well as on saving
let g:syntastic_check_on_open=0
" /// disable auto check, use keybinding.
map <Leader>s :SyntasticCheck <Enter>
map <Leader>ts :SyntasticToggleMode <Enter>

" Default gui color scheme
set t_Co=256
" colorscheme molokai
colorscheme jellybeans

let vimrplugin_screenplugin = 0

" autocmd FileType python setlocal omnifunc=pysmell#Complete

" gUndo Document is here http://sjl.bitbucket.org/gundo.vim/
nnoremap <F5> :GundoToggle<CR>

" Markdown Preview
au FileType markdown map <D-r> :PreviewMarkdown <Enter>

" NERDTree

let loaded_nerd_tree = 1
let NERDTreeChDirMode = 2
let NERDTreeMinimalUI = 1

" gvim
"

" set file encodings
let &termencoding=&encoding
set fileencodings=utf-8,gbk,ucs-bom,cp936

" file formatter

" javascript
autocmd Filetype javascript noremap <buffer> <c-f> :call JsBeautify()<cr>
" html
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
" css or scss
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>

